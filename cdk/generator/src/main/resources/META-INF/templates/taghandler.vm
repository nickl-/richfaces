/**
 * GENERATED FILE - DO NOT EDIT
 *
 */

package ${tag.packageName};

#foreach($import in $imports)
import $import ;
#end
import javax.faces.component.ActionSource2;
import javax.faces.component.UIComponent;
import ${component.classname};
import org.richfaces.webapp.taglib.MethodBindingMethodExpressionAdaptor;
import com.sun.faces.facelets.el.LegacyMethodBinding;

import javax.faces.view.facelets.*;

/**
 * @author shura (latest modification by $Author: alexsmirnov $)
 * @version $Revision: 1.1.2.1 $ $Date: 2007/02/26 20:48:51 $
 *
 */
public class $tag.simpleClassName extends $tag.superclass {


  private static final ${tag.simpleClassName}MetaRule metaRule = new ${tag.simpleClassName}MetaRule();


  
  public ${tag.simpleClassName}(ComponentConfig config) 
  {
    super(config);
  }
// Metarule
  protected MetaRuleset createMetaRuleset(Class type)
  {
    MetaRuleset m = super.createMetaRuleset(type);
	m.addRule(metaRule);
	return m;
  }

  	/**
	 * @author shura (latest modification by $Author: alexsmirnov $)
	 * @version $Revision: 1.1.2.1 $ $Date: 2007/02/26 20:48:51 $
	 *
	 */
	static class ${tag.simpleClassName}MetaRule extends MetaRule{

		/* (non-Javadoc)
		 * @see javax.faces.view.facelets.MetaRule#applyRule(java.lang.String,
		 *      javax.faces.view.facelets.TagAttribute, javax.faces.view.facelets.MetadataTarget)
		 */
		public Metadata applyRule(String name, TagAttribute attribute, MetadataTarget meta) {
	        if (meta.isTargetInstanceOf(${component.simpleClassName}.class)) {
		#foreach($prop in $component.properties)
		 #if( !$prop.existintag )
		  #if( $prop.isInstanceof("javax.faces.el.MethodBinding") || $prop.isInstanceof("javax.el.MethodExpression") )
	            #if ( $prop.name != "actionExpression" )
	            
	            if ("${prop.name}".equals(name)) {
	                    return new ${prop.name}Mapper(attribute);
	            }
				
				#else
		
				//skip $prop.name
	
				#end
		  #end
		 #end
		#end
	        }
			return null;
		}

	}

#foreach($prop in $component.properties)
#if( !$prop.existintag )

  #if( $prop.isInstanceof("javax.faces.el.MethodBinding") || $prop.isInstanceof("javax.el.MethodExpression") )
	#if ( $prop.name != "actionExpression" )
	
	static class ${prop.name}Mapper extends Metadata {

		private static final Class[] SIGNATURE = new Class[] {${prop.methodArgsClasses}};

		private final TagAttribute _action;
		/**
		 * @param attribute
		 */
		public ${prop.name}Mapper(TagAttribute attribute) {
			_action = attribute;
		}

		/* (non-Javadoc)
		 * @see javax.faces.view.facelets.Metadata#applyMetadata(javax.faces.view.facelets.FaceletContext, java.lang.Object)
		 */
		public void applyMetadata(FaceletContext ctx, Object instance) {
            ((${component.simpleClassName}) instance)
            .${prop.setterName}
            	#if( $prop.isInstanceof("javax.faces.el.MethodBinding"))
                    (new MethodBindingMethodExpressionAdaptor(this._action.getMethodExpression(ctx, null,
                            SIGNATURE)));
            	#else
            		(this._action.getMethodExpression(ctx, null,
                            SIGNATURE));
            	#end
		}

	}
	
	#end
	
	#end
 #end
 #end
}
